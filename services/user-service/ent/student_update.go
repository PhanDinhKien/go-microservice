// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app-microservice/services/user-service/ent/predicate"
	"app-microservice/services/user-service/ent/student"
	"app-microservice/services/user-service/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StudentUpdate is the builder for updating Student entities.
type StudentUpdate struct {
	config
	hooks    []Hook
	mutation *StudentMutation
}

// Where appends a list predicates to the StudentUpdate builder.
func (_u *StudentUpdate) Where(ps ...predicate.Student) *StudentUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetStudentCode sets the "student_code" field.
func (_u *StudentUpdate) SetStudentCode(v string) *StudentUpdate {
	_u.mutation.SetStudentCode(v)
	return _u
}

// SetNillableStudentCode sets the "student_code" field if the given value is not nil.
func (_u *StudentUpdate) SetNillableStudentCode(v *string) *StudentUpdate {
	if v != nil {
		_u.SetStudentCode(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *StudentUpdate) SetName(v string) *StudentUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *StudentUpdate) SetNillableName(v *string) *StudentUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *StudentUpdate) SetEmail(v string) *StudentUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *StudentUpdate) SetNillableEmail(v *string) *StudentUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetPhone sets the "phone" field.
func (_u *StudentUpdate) SetPhone(v string) *StudentUpdate {
	_u.mutation.SetPhone(v)
	return _u
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (_u *StudentUpdate) SetNillablePhone(v *string) *StudentUpdate {
	if v != nil {
		_u.SetPhone(*v)
	}
	return _u
}

// SetDateOfBirth sets the "date_of_birth" field.
func (_u *StudentUpdate) SetDateOfBirth(v time.Time) *StudentUpdate {
	_u.mutation.SetDateOfBirth(v)
	return _u
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (_u *StudentUpdate) SetNillableDateOfBirth(v *time.Time) *StudentUpdate {
	if v != nil {
		_u.SetDateOfBirth(*v)
	}
	return _u
}

// SetAddress sets the "address" field.
func (_u *StudentUpdate) SetAddress(v string) *StudentUpdate {
	_u.mutation.SetAddress(v)
	return _u
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (_u *StudentUpdate) SetNillableAddress(v *string) *StudentUpdate {
	if v != nil {
		_u.SetAddress(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *StudentUpdate) SetCreatedAt(v time.Time) *StudentUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *StudentUpdate) SetNillableCreatedAt(v *time.Time) *StudentUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *StudentUpdate) SetUpdatedAt(v time.Time) *StudentUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *StudentUpdate) SetDeletedAt(v time.Time) *StudentUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *StudentUpdate) SetNillableDeletedAt(v *time.Time) *StudentUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *StudentUpdate) ClearDeletedAt() *StudentUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *StudentUpdate) SetUserID(v int) *StudentUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *StudentUpdate) SetNillableUserID(v *int) *StudentUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *StudentUpdate) ClearUserID() *StudentUpdate {
	_u.mutation.ClearUserID()
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *StudentUpdate) SetUser(v *User) *StudentUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the StudentMutation object of the builder.
func (_u *StudentUpdate) Mutation() *StudentMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *StudentUpdate) ClearUser() *StudentUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *StudentUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StudentUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *StudentUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StudentUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StudentUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := student.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *StudentUpdate) check() error {
	if v, ok := _u.mutation.StudentCode(); ok {
		if err := student.StudentCodeValidator(v); err != nil {
			return &ValidationError{Name: "student_code", err: fmt.Errorf(`ent: validator failed for field "Student.student_code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := student.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Student.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Email(); ok {
		if err := student.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Student.email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Phone(); ok {
		if err := student.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Student.phone": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Address(); ok {
		if err := student.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Student.address": %w`, err)}
		}
	}
	return nil
}

func (_u *StudentUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(student.Table, student.Columns, sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.StudentCode(); ok {
		_spec.SetField(student.FieldStudentCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(student.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(student.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.Phone(); ok {
		_spec.SetField(student.FieldPhone, field.TypeString, value)
	}
	if value, ok := _u.mutation.DateOfBirth(); ok {
		_spec.SetField(student.FieldDateOfBirth, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Address(); ok {
		_spec.SetField(student.FieldAddress, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(student.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(student.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(student.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(student.FieldDeletedAt, field.TypeTime)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.UserTable,
			Columns: []string{student.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.UserTable,
			Columns: []string{student.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{student.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// StudentUpdateOne is the builder for updating a single Student entity.
type StudentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StudentMutation
}

// SetStudentCode sets the "student_code" field.
func (_u *StudentUpdateOne) SetStudentCode(v string) *StudentUpdateOne {
	_u.mutation.SetStudentCode(v)
	return _u
}

// SetNillableStudentCode sets the "student_code" field if the given value is not nil.
func (_u *StudentUpdateOne) SetNillableStudentCode(v *string) *StudentUpdateOne {
	if v != nil {
		_u.SetStudentCode(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *StudentUpdateOne) SetName(v string) *StudentUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *StudentUpdateOne) SetNillableName(v *string) *StudentUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *StudentUpdateOne) SetEmail(v string) *StudentUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *StudentUpdateOne) SetNillableEmail(v *string) *StudentUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetPhone sets the "phone" field.
func (_u *StudentUpdateOne) SetPhone(v string) *StudentUpdateOne {
	_u.mutation.SetPhone(v)
	return _u
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (_u *StudentUpdateOne) SetNillablePhone(v *string) *StudentUpdateOne {
	if v != nil {
		_u.SetPhone(*v)
	}
	return _u
}

// SetDateOfBirth sets the "date_of_birth" field.
func (_u *StudentUpdateOne) SetDateOfBirth(v time.Time) *StudentUpdateOne {
	_u.mutation.SetDateOfBirth(v)
	return _u
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (_u *StudentUpdateOne) SetNillableDateOfBirth(v *time.Time) *StudentUpdateOne {
	if v != nil {
		_u.SetDateOfBirth(*v)
	}
	return _u
}

// SetAddress sets the "address" field.
func (_u *StudentUpdateOne) SetAddress(v string) *StudentUpdateOne {
	_u.mutation.SetAddress(v)
	return _u
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (_u *StudentUpdateOne) SetNillableAddress(v *string) *StudentUpdateOne {
	if v != nil {
		_u.SetAddress(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *StudentUpdateOne) SetCreatedAt(v time.Time) *StudentUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *StudentUpdateOne) SetNillableCreatedAt(v *time.Time) *StudentUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *StudentUpdateOne) SetUpdatedAt(v time.Time) *StudentUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *StudentUpdateOne) SetDeletedAt(v time.Time) *StudentUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *StudentUpdateOne) SetNillableDeletedAt(v *time.Time) *StudentUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *StudentUpdateOne) ClearDeletedAt() *StudentUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *StudentUpdateOne) SetUserID(v int) *StudentUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *StudentUpdateOne) SetNillableUserID(v *int) *StudentUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *StudentUpdateOne) ClearUserID() *StudentUpdateOne {
	_u.mutation.ClearUserID()
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *StudentUpdateOne) SetUser(v *User) *StudentUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the StudentMutation object of the builder.
func (_u *StudentUpdateOne) Mutation() *StudentMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *StudentUpdateOne) ClearUser() *StudentUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the StudentUpdate builder.
func (_u *StudentUpdateOne) Where(ps ...predicate.Student) *StudentUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *StudentUpdateOne) Select(field string, fields ...string) *StudentUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Student entity.
func (_u *StudentUpdateOne) Save(ctx context.Context) (*Student, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StudentUpdateOne) SaveX(ctx context.Context) *Student {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *StudentUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StudentUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StudentUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := student.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *StudentUpdateOne) check() error {
	if v, ok := _u.mutation.StudentCode(); ok {
		if err := student.StudentCodeValidator(v); err != nil {
			return &ValidationError{Name: "student_code", err: fmt.Errorf(`ent: validator failed for field "Student.student_code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := student.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Student.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Email(); ok {
		if err := student.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Student.email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Phone(); ok {
		if err := student.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Student.phone": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Address(); ok {
		if err := student.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Student.address": %w`, err)}
		}
	}
	return nil
}

func (_u *StudentUpdateOne) sqlSave(ctx context.Context) (_node *Student, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(student.Table, student.Columns, sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Student.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, student.FieldID)
		for _, f := range fields {
			if !student.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != student.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.StudentCode(); ok {
		_spec.SetField(student.FieldStudentCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(student.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(student.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.Phone(); ok {
		_spec.SetField(student.FieldPhone, field.TypeString, value)
	}
	if value, ok := _u.mutation.DateOfBirth(); ok {
		_spec.SetField(student.FieldDateOfBirth, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Address(); ok {
		_spec.SetField(student.FieldAddress, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(student.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(student.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(student.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(student.FieldDeletedAt, field.TypeTime)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.UserTable,
			Columns: []string{student.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.UserTable,
			Columns: []string{student.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Student{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{student.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
