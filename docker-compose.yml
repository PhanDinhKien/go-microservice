version: '3.8'

services:
  api-gateway:
    build:
      context: .
      dockerfile: services/api-gateway/Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - user-service
      - product-service
    environment:
      - PORT=8080
      - SERVICE_NAME=api-gateway
    networks:
      - microservice-network

  user-service:
    build:
      context: .
      dockerfile: services/user-service/Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - PORT=8081
      - SERVICE_NAME=user-service
      - DB_DRIVER=postgres
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=microservice_db
      - DB_SSLMODE=disable
      - DB_MAX_OPEN_CONNECTIONS=25
      - DB_MAX_IDLE_CONNECTIONS=10
      - DB_CONNECTION_MAX_LIFETIME=5m
    volumes:
      - ./services/user-service/.env:/app/.env
    networks:
      - microservice-network

  product-service:
    build:
      context: .
      dockerfile: services/product-service/Dockerfile
    ports:
      - "8082:8082"
    environment:
      - PORT=8082
      - SERVICE_NAME=product-service
    networks:
      - microservice-network

  postgres:
    image: postgres:15-alpine
    container_name: postgres-db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=microservice_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:

networks:
  microservice-network:
    driver: bridge
